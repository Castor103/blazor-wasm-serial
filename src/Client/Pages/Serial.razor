@page "/serial"

@using System;
@using System.Text;
@using System.Diagnostics;
@using System.IO.Ports;
@using System.Threading;
@using FluentSample.Infra;
@using FluentSample.Shared.Logic;

@inject IJSRuntime JSRuntime
@inject ISerialPort SerialP

<style>
	#box{ margin: 3px; padding: 2px 2px; }
    .sub-title{
        height: 1px;
    }
</style>

<PageTitle>Serial</PageTitle>

<h1>Serial</h1>

<FluentStack Orientation="Orientation.Vertical"
                HorizontalAlignment="@Horizontal"
                VerticalAlignment="@Vertical">
    <div>
		<div id="box">
            <FluentStack Orientation="Orientation.Vertical"
                        HorizontalAlignment="@Horizontal"
                        VerticalAlignment="@Vertical"
                        Style="border: 0px dotted var(--accent-fill-rest)">

                <h6  class="sub-title">Serial Control</h6>
                <FluentStack Orientation="Orientation.Horizontal"
                    HorizontalAlignment="@Horizontal"
                    VerticalAlignment="@Vertical">
                    <FluentSelect ReadOnly="true" ValueChanged="@(e => selectedBaudrateValue = e)" TOption="string">
                        <FluentOption Value="115200">115200</FluentOption>
                        <FluentOption Value="19200">19200</FluentOption>
                        <FluentOption Value="9600">9600</FluentOption>
                        <FluentOption Value="4800">4800</FluentOption>
                    </FluentSelect>
                    <FluentButton Appearance="Appearance.Accent" @onclick="DoOpen">Open</FluentButton>
                    <FluentButton Appearance="Appearance.Accent" @onclick="DoCloseForce">Close</FluentButton>
                </FluentStack>

                <h6 class="sub-title">Logic Control</h6>
                <FluentStack Orientation="Orientation.Horizontal"
                    HorizontalAlignment="@Horizontal"
                    VerticalAlignment="@Vertical">
                    <FluentSelect Disabled="@unabledSelectCompLogicModule" ReadOnly="true" ValueChanged="@(e => selectedLogicModule = e)" TOption="string">
                        <FluentOption Value="0">Thermometer</FluentOption>
                        <FluentOption Value="1">Thrust</FluentOption>
                    </FluentSelect>
                    <FluentButton Appearance="Appearance.Accent" @onclick="DoStartLogic">Logic Start</FluentButton>
                    <FluentButton Appearance="Appearance.Accent" @onclick="DoStopLogic">Logic Stop</FluentButton>
                </FluentStack>
                <h6 class="sub-title">View Control</h6>
                <FluentStack Orientation="Orientation.Horizontal"
                    HorizontalAlignment="@Horizontal"
                    VerticalAlignment="@Vertical">
                    <FluentButton Appearance="Appearance.Accent" @onclick="DoHistoryClear">History Clear</FluentButton>
                    <FluentButton Appearance="Appearance.Accent" @onclick="DoScrollBottom">Focus Scroll Bottom</FluentButton>
                </FluentStack>
            </FluentStack>
        </div>
	</div>
    <div style="width: 70%">
		<div id="box" style="width: 100%">
            <FluentStack Orientation="Orientation.Horizontal"
                HorizontalAlignment="@Horizontal"
                VerticalAlignment="@Vertical"
                Style="border: 0px dotted var(--accent-fill-rest)">
                <h5>Message TxRx History</h5>
                <FluentSwitch @bind-Value=@IsDisplayStrOrHex Label="Display String or Hex">
                    <span slot="unchecked-message">String</span>
                    <span slot="checked-message">Hex</span>
                </FluentSwitch>
            </FluentStack>
            <FluentTextArea @ref="_refDataHistory" id="textarea_id" @bind-Value=dataHistory Rows="12" ReadOnly="true" style="width: 100%; font-family: Consolas,monaco,monospace;"></FluentTextArea>
        </div>
	</div>
    <div style="width: 80%">
		<div id="box" style="width: 100%">
            <FluentStack Orientation="Orientation.Horizontal"
                HorizontalAlignment="@Horizontal"
                VerticalAlignment="@Vertical"
                
                Style="border: 0px dotted var(--accent-fill-rest)">
                <h5>SendMessage</h5>
                <FluentSwitch @bind-Value=@IsInputStrOrHex Label="Input String or Hex">
                    <span slot="unchecked-message">String</span>
                    <span slot="checked-message">Hex</span>
                </FluentSwitch>
            </FluentStack>
            <FluentStack Orientation="Orientation.Horizontal"
                        HorizontalAlignment="@Horizontal"
                        VerticalAlignment="@Vertical"
                        HorizontalGap="4"
                        Style="border: 0px dotted var(--accent-fill-rest)">
                <div style="width: 80%">
                    <FluentTextField @bind-Value=@dataForSend @onkeyup="@DoKeyup" style="width: 100%"></FluentTextField>
                </div>
                <div style="width: 300px">
                    <FluentButton Appearance="Appearance.Accent" @onclick="DoSend">Send</FluentButton>
                    <FluentButton Appearance="Appearance.Accent" @onclick="DoClear">Clear</FluentButton>
                </div>
            </FluentStack>
        </div>
	</div>
</FluentStack>

@code {
    HorizontalAlignment Horizontal = HorizontalAlignment.Left;
    VerticalAlignment Vertical = VerticalAlignment.Top;

    private int Count { get; set; } = 100;
    private string selectedBaudrateValue = "115200";
    private string selectedLogicModule = "0";
    private Timer? _updateTimer = null;
    public string ScaleValue { get; set; } = "0.000";   
    private string? dataForSend, dataHistory; 
    private bool unabledSelectCompLogicModule = false;
    private ILogicModule? _logicModule = null;
    private bool IsDisplayStrOrHex = false;
    private bool IsInputStrOrHex = false;
    private FluentTextArea? _refDataHistory;

    // for JSInvokable Function
    private DotNetObjectReference<Serial>? objectReference;
    private static Func<byte[], Task>? ChangeParaContentActionAsyncBytes;
    private static Func<string, Task>? ChangeParaContentActionAsyncString;

    private async Task LocalChangeParaContentValueAsyncBytes(byte[] value)
    {
        await CallbackListen("RX <<", value);
    }

    private async Task LocalChangeParaContentValueAsyncString(string value)
    {
        var result = Encoding.UTF8.GetBytes(value);
        await CallbackListen("RX <<", result);
    }

    #region Lifecycle Method, Interface Method 

    protected override void OnInitialized()
    {
        base.OnInitialized();

        ChangeParaContentActionAsyncBytes = LocalChangeParaContentValueAsyncBytes;
        ChangeParaContentActionAsyncString = LocalChangeParaContentValueAsyncString;
    }

    protected override async Task OnInitializedAsync()
    {
        //ScaleValue = await _readSerialPortService.GetSerialValue();
        _updateTimer = new Timer(state => { InvokeAsync(GetValue); }, null, 0, 100);

        await Task.Delay(1);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            // https://www.learnblazor.com/javascript-interop-csharp-from-javascript
            //stringHelpersRef = DotNetObjectReference.Create(new StringHelpers(input));

            // https://stackoverflow.com/questions/75190456/jsinvokable-blazor-method-not-being-called
            objectReference = DotNetObjectReference.Create(this);
        }

        await Task.Delay(1);
    }

    public void Dispose()
    {
        ChangeParaContentActionAsyncBytes = null;
        ChangeParaContentActionAsyncString = null;
        _updateTimer?.Dispose();
        objectReference?.Dispose();

    }

    #endregion

    #region Method

    #region Method From UI Event

    public async Task DoOpen()
    {
        try
        {
            var requestPortReponse = await SerialP.RequestPort();

            if (requestPortReponse == FluentSample.Infra.Enums.RequestPortResponseEnum.Ok)
            {
                Console.WriteLine($"RequestPort ok");

                int getBaudrate = GetSelectBaudrate();

                if(getBaudrate != -1)
                {
                    var openResponse = await SerialP.Open(getBaudrate);

                    if(openResponse == FluentSample.Infra.Enums.ConnectResponseEnum.Ok)
                    {
                        Console.WriteLine($"DoOpen ok");
                    }
                    else
                    {
                        Console.WriteLine($"DoOpen ng - [{openResponse.ToString()}]");
                    }
                }
            }
            else
            {
                Console.WriteLine($"RequestPort ng - [{requestPortReponse.ToString()}]");
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
       
        await InvokeAsync(() => StateHasChanged());
    }

    public async Task DoSend()
    {
        if(!string.IsNullOrEmpty(dataForSend))
        {
            if(IsInputStrOrHex)
            {
                byte[]? data = Enumerable.Range(0, dataForSend.Length)
                      .Where(x => x % 2 == 0)
                      .Select(x => Convert.ToByte(dataForSend.Substring(x, 2), 16))
                      .ToArray();

                if(data != null && data.Length > 0)
                {
                    #pragma warning disable 8602
                    #pragma warning disable 8604
                    var dataToString = data?.ToString().Replace("-", " ");

                    Console.WriteLine($"DoSend [{dataToString}]");
                    await SendMessage(data);
                    #pragma warning restore 8602
                    #pragma warning restore 8604
                }
                else
                {
                    await Task.Delay(1);
                }
            }
            else
            {
                byte[] data = Encoding.UTF8.GetBytes(dataForSend);
                await SendMessage(data);
            }
        }
    }

    public async Task DoClear()
    {
        dataForSend = string.Empty;
        
        await InvokeAsync(() => StateHasChanged());
    }

    public async Task DoClose()
    {
        await SerialP.Close();
    }

    public async Task DoCloseForce()
    {
         await SerialP.CloseForce();
    }

    public async void DoKeyup(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs args)
    {
        //Console.WriteLine($"Key Pressed is " + args.Key);
        //await InvokeAsync(() => StateHasChanged());

        if (args.Key == "Enter")
        {
            await DoSend();
        }

        await Task.Delay(1);
    }

    public async Task DoHistoryClear()
    {
        dataHistory = string.Empty;

        await InvokeAsync(() => StateHasChanged());
    }

    public async Task DoScrollBottom()
    {
        _refDataHistory?.FocusAsync();

        await InvokeAsync(() => StateHasChanged());
    }

    public async Task DoStartLogic()
    {
        bool IsModuleSelectOk = false;

        if(!unabledSelectCompLogicModule)
        {
            int selectValue = -1;

            IsModuleSelectOk = int.TryParse(selectedLogicModule, out selectValue);

            if(IsModuleSelectOk)
            {
                switch(selectValue)
                {
                    case 0:
                        _logicModule = new Shared.Logic.Thermometer.ThermometerDummy();
                        break;
                    case 1:
                        _logicModule = new Shared.Logic.Thrust.SteamJet();
                        break;
                    default:
                        Console.WriteLine($"IsModuleSelectOk [{selectValue}] - logicValue ng");
                        IsModuleSelectOk = false;
                        break;
                }
            }
        }

        if(IsModuleSelectOk)
        {
            if(_logicModule != null)
            {
                var result = await _logicModule.Start();

                if(result)
                {
                    unabledSelectCompLogicModule = true;
                }
            }
            else
            {
                Console.WriteLine($"_logicModule is null");
            }
        }

        await InvokeAsync(() => StateHasChanged());
    }

    public async Task DoStopLogic()
    {
        if(_logicModule == null)
        {
            Console.WriteLine($"생성된 logicModule이 없음");

            await Task.Delay(1);
        }
        else
        {
            var result = await _logicModule.Stop();

            if(result)
            {
                unabledSelectCompLogicModule = false;
            }

            await InvokeAsync(() => StateHasChanged());
        }
    }

    #endregion

    #region Internal Method

    public int GetSelectBaudrate()
    {
        int result = -1;

        try
        {
            if(int.TryParse(selectedBaudrateValue, out result))
            {
               //
            }
            else
            {
                Console.WriteLine($"selectedBaudrateValue Fail TryParse [{selectedBaudrateValue}]");
            }
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex);
        }
        
        return result;
    }

    public async Task SendMessage(byte[] data)
    {
        //if(SerialP.IsConnected)
        {
            //byte[] messageToBytes = Encoding.ASCII.GetBytes(message);
            await SerialP.Write(data);
            await CallbackListen("TX >>", data);
        }
    }

    public string GetTimestamp()
    {
        return (DateTime.Now).ToString("HH:mm:ss.fff");
    }

    public string GetViewData(byte[] data)
    {
        if(IsDisplayStrOrHex)
        {
            var result = BitConverter.ToString(data).Replace("-", " ");
            return $"(hex) {result}";
        }
        else
        {
            return Encoding.UTF8.GetString(data);
        }
    }

    public async Task CallbackListen(string prefix, byte[] data)
    {
        try
        {
            string curruntTimestamp = GetTimestamp();

            string rxStringForDisplay = GetViewData(data);
            dataHistory += $"[{curruntTimestamp}] {prefix} {rxStringForDisplay}" + Environment.NewLine;

            if(_logicModule != null && _logicModule.IsOn)
            {
                var cmd = data.ToString();

                if(cmd != null)
                {
                    byte[] dataBytes = await _logicModule.GetResponse(data);

                    if(dataBytes != null && dataBytes.Length > 0)
                    {
                        //byte[] dataBytes = Encoding.UTF8.GetBytes(response);
                        //byte[] dataBytes = Encoding.ASCII.GetBytes(response);

                        string rtStringForDisplay = GetViewData(dataBytes);
                        dataHistory += $"[{curruntTimestamp}] RT >> {rtStringForDisplay}" + Environment.NewLine;

                        await SerialP.Write(dataBytes);
                    }
                }
            }
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex);
        }

        _refDataHistory?.FocusAsync(false);

        await InvokeAsync(() => StateHasChanged());
    }

    public async Task GetValue()
    {
        //ScaleValue = await _readSerialPortService.GetSerialValue();
        await InvokeAsync(() => StateHasChanged());
    }

    #endregion

    #endregion

    #region JSInvokable Method

    [JSInvokable]
    public static void UpdateMessageBytes(byte[] data)
    {
        try
        {
            if (ChangeParaContentActionAsyncBytes is {} actionAsync)
            {
                //await actionAsync(data);
                actionAsync(data);
            }
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    [JSInvokable]
    public static void UpdateMessageString(string data)
    {
        try
        {
            if (ChangeParaContentActionAsyncString is {} actionAsync)
            {
                //await actionAsync(data);
                actionAsync(data);
            }
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    #endregion

    #region TestFunction

    public async Task DoTest01()
    {
        try
        {
            Console.WriteLine($"DoTest01");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
       
        await InvokeAsync(() => StateHasChanged());
    }

    public async Task DoTest02()
    {
        try
        {
            Console.WriteLine($"DoTest02");
            
            await JSRuntime.InvokeVoidAsync("sayHello1");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
       
        await InvokeAsync(() => StateHasChanged());
    }

    public async Task DoTest03()
    {
        try
        {
            Console.WriteLine($"DoTest03");

            _refDataHistory?.FocusAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
       
        await InvokeAsync(() => StateHasChanged());
    }

    public async Task DoTest04()
    {
        try
        {
            Console.WriteLine($"DoTest04");

             dataHistory += $"temp" + Environment.NewLine;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
       
        await InvokeAsync(() => StateHasChanged());
    }

    #endregion

}
